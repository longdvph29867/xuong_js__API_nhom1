// import slugify from "slugify";
import User from "../models/User.js";
import bcryptjs from "bcryptjs";
import { signUpValid } from "../validations/user.js";

export const getAll = async (req, res) => {
  try {
    const data = await User.find();
    if (!data && data.length === 0) {
      return res.status(404).json({
        message: "Kh√¥ng t√¨m th·∫•y user",
      });
    }
    return res.status(200).json({
      message: "L·∫•y th√†nh c√¥ng!",
      data: data,
    });
  } catch (error) {
    res.status(500).json({
      message: "L·ªói trong qu√° tr√¨nh l·∫•y d·ªØ li·ªáu",
    });
  }
};

export const getDetail = async (req, res) => {
  try {
    const user = await User.findOne({_id: req.params.id});
    console.log("üöÄ ~ file: users.js:26 ~ getDetail ~ req.params.id:", req.params.id)
    if (!user) {
      return res.status(404).json({
        message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c!",
      });
    }
    return res.status(200).json({
      message: "L·∫•y th√†nh c√¥ng 1 danh m·ª•c!",
      data: user,
    });
  } catch (error) {
    res.status(500).json({
      name: error.message,
      message: "L·ªói trong qu√° tr√¨nh l·∫•y d·ªØ li·ªáu",
    });
  }
};

export const create = async (req, res) => {
  try {
    //b1 validate
    const { error } = signUpValid.validate(req.body, { abortEarly: false });
    if (error) {
      const errors = error.details.map(err => err.message);
      return res.status(400).json({
        message: errors,
      });
    }
    // ki·ªÉm tra username t·ªìn t·∫°i
    const userExists = await User.findOne({ username: req.body.username });
    if (userExists) {
      return res.status(400).json({
        message: "T√™n ƒëƒÉng nh·∫≠p n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!",
      });
    }
    
    // ki·ªÉm tra email t·ªìn t·∫°i
    const userExistsEmail = await User.findOne({ email: req.body.email });
    if (userExistsEmail) {
      return res.status(400).json({
        message: "Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!",
      });
    }

    // M√£ ho√° password
    const hashedPassword = await bcryptjs.hash(req.body.password, 10);

    // Kh·ªüi t·∫°o user trong db
    const user = await User.create({
      ...req.body,
      password: hashedPassword,
    });

    // th√¥ng b√°o th√†nh c√¥ng
    //xo√° m·∫≠t kh·∫©u
    user.password = undefined;
    return res.status(200).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      user,
    });

  } catch (error) {
    res.status(500).json({
      name: error.name,
      names: error.message,
      message: "L·ªói trong qu√° tr√¨nh l·∫•y d·ªØ li·ªáu",
    });
  }
};

export const update = async (req, res) => {
  try {
    //b1 validate
    const { error } = signUpValid.validate(req.body, { abortEarly: false });
    if (error) {
      const errors = error.details.map(err => err.message);
      return res.status(400).json({
        message: errors,
      });
    }
    // ki·ªÉm tra username t·ªìn t·∫°i
    const userExists = await User.findOne({ username: req.body.username, _id: { $ne: req.params.id }});
    if (userExists) {
      return res.status(400).json({
        message: "T√™n ƒëƒÉng nh·∫≠p n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!",
      });
    }
    
    // ki·ªÉm tra email t·ªìn t·∫°i
    const userExistsEmail = await User.findOne({ email: req.body.email, _id: { $ne: req.params.id }});
    if (userExistsEmail) {
      return res.status(400).json({
        message: "Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!",
      });
    }

    // M√£ ho√° password
    const hashedPassword = await bcryptjs.hash(req.body.password, 10);

    // Kh·ªüi t·∫°o user trong db
    const data = {
      ...req.body,
      password: hashedPassword
    }

    // ki·ªÉm tra ƒë√£ t·ªìn t·∫°i ch∆∞a
    const category = await User.findByIdAndUpdate(req.params.id, data, { new: true });
    if(!category) {
      return res.status(404).json({
        message: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th·∫•t b·∫°i'
      })
    }
    
    return res.status(200).json({
      message: "C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng",
      data: category,
    });

  } catch (error) {
    res.status(500).json({
      name: error.name,
      message: error.message,
    });
  }
};

export const remove = async (req, res) => {
  try {
    const data = await User.findByIdAndDelete(req.params.id);
    if(!data) {
      return res.status(400).json({
        message: 'Xoa th·∫•t b·∫°i',
      })
    }
    return res.status(200).json({
      message: "Xo√° th√†nh c√¥ng",
      data: data
    });
  } catch (error) {
    res.status(500).json({
      name: error.name,
      message: error.message,
    });
  }
};